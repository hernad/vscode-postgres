{
	"name": "postgres",
	"displayName": "PSQL bringout DEV",
	"description": "PostgreSQL menad≈æer DEV",
	"version": "2.0.0",
	"publisher": "bringout",
	"keywords": [
		"eShell",
		"PSQL"
	],
	"license": "MIT",
	"repository": {
		"type": "git",
		"url": "https://github.com/hernad/vscode-postgres.git"
	},
	"engines": {
		"vscode": "^1.41.0"
	},
	"categories": [
		"Other"
	],
	"activationEvents": [
		"*"
	],
	"main": "./out/extension",
	"contributes": {
		"configuration": {
			"type": "object",
			"title": "PostgreSQL",
			"properties": {
				"postgres.defaultConnection": {
					"type": "string",
					"default": "",
					"description": "The default connection to use"
				},
				"postgres.defaultDatabase": {
					"type": "string",
					"default": "",
					"description": "The default database on the default connection to use"
				},
				"postgres.showExplorer": {
					"type": "boolean",
					"default": true,
					"description": "Show or hide the database explorer."
				},
				"postgres.prettyPrintJSONfields": {
					"type": "boolean",
					"default": false,
					"description": "Turns on/off pretty printing of JSON fields"
				},
				"postgres.setConnectionFromExplorer": {
					"type": "string",
					"enum": [
						"always",
						"ifunset",
						"never"
					],
					"default": "always",
					"description": "Controls whether selecting a database in explorer changes the current editor's connection"
				},
				"postgres.tableColumnSortOrder": {
					"type": "string",
					"enum": [
						"db-order",
						"alpha",
						"reverse-alpha"
					],
					"default": "db-order",
					"description": "Controls the order of the columns in the database explorer. Default is db-order which orders the columns as the were added to the table (how postgres reports them)"
				},
				"postgres.intervalFormat": {
					"type": "string",
					"enum": [
						"iso_8601",
						"humanize",
						"succinct"
					],
					"default": "iso_8601",
					"description": "Controls the display format for `interval` columns. Default is the iso_8601 standard which does not cover milliseconds."
				},
				"postgres.virtualFolders": {
					"type": "array",
					"default": [
						"functions"
					],
					"description": "Controls virtual folders that are shown under schema. Currently only functions are supported."
				}
			}
		},
		"keybindings": [
			{
				"command": "postgres.runQuery",
				"key": "f5",
				"when": "editorLangId == postgres"
			}
		],
		"commands": [
			{
				"command": "postgres.addConnection",
				"title": "Add Connection",
				"icon": {
					"light": "resources/light/add.svg",
					"dark": "resources/dark/add.svg"
				},
				"category": "PostgreSQL"
			},
			{
				"command": "postgres.deleteConnection",
				"title": "Delete Connection",
				"category": "PostgreSQL"
			},
			{
				"command": "postgres.selectConnection",
				"title": "Select Connection",
				"category": "PostgreSQL"
			},
			{
				"command": "postgres.renameConnection",
				"title": "Rename Connection",
				"category": "PostgreSQL"
			},
			{
				"command": "postgres.editConnection",
				"title": "Edit Connection",
				"category": "PostgreSQL"
			},
			{
				"command": "postgres.newQuery",
				"title": "New Query",
				"category": "PostgreSQL"
			},
			{
				"command": "postgres.refresh",
				"title": "Refresh Items",
				"category": "PostgreSQL"
			},
			{
				"command": "postgres.selectTop",
				"title": "Select Top...",
				"category": "PostgreSQL"
			},
			{
				"command": "postgres.selectTop1000",
				"title": "Select Top 1000",
				"category": "PostgreSQL"
			},
			{
				"command": "postgres.runQuery",
				"title": "Run Query",
				"category": "PostgreSQL"
			},
			{
				"command": "postgres.saveResult",
				"title": "Save Result",
				"category": "PostgreSQL",
				"icon": {
					"light": "./resources/light/save.svg",
					"dark": "./resources/dark/save.svg"
				}
			}
		],
		"menus": {
			"editor/title": [
				{
					"command": "postgres.saveResult",
					"when": "vscodePostgresResultFocus",
					"group": "navigation"
				}
			],
			"view/title": [
				{
					"command": "postgres.addConnection",
					"when": "view == postgres",
					"group": "navigation@1"
				}
			],
			"commandPalette": [
				{
					"command": "postgres.runQuery",
					"when": "editorLangId == postgres"
				},
				{
					"command": "postgres.runQuery",
					"when": "editorLangId != postgres && editorHasSelection && !editorHasMultipleSelections"
				},
				{
					"command": "postgres.selectTop",
					"when": "config.postgres.never"
				},
				{
					"command": "postgres.selectTop1000",
					"when": "config.postgres.never"
				},
				{
					"command": "postgres.saveResult",
					"when": "config.postgres.never"
				}
			],
			"editor/context": [
				{
					"command": "postgres.runQuery",
					"when": "editorLangId != postgres && editorHasSelection && !editorHasMultipleSelections",
					"group": "navigation"
				},
				{
					"command": "postgres.runQuery",
					"when": "editorLangId == postgres",
					"group": "navigation"
				}
			],
			"view/item/context": [
				{
					"command": "postgres.editConnection",
					"when": "view == postgres && viewItem == postgres.tree.connection",
					"group": "postgres@2"
				},
				{
					"command": "postgres.deleteConnection",
					"when": "view == postgres && viewItem == postgres.tree.connection",
					"group": "postgres@2"
				},
				{
					"command": "postgres.renameConnection",
					"when": "view == postgres && viewItem == postgres.tree.connection",
					"group": "postgres@2"
				},
				{
					"command": "postgres.refresh",
					"when": "view == postgres && viewItem == postgres.tree.connection",
					"group": "postgres@1"
				},
				{
					"command": "postgres.refresh",
					"when": "view == postgres && viewItem == postgres.tree.schema",
					"group": "postgres@1"
				},
				{
					"command": "postgres.refresh",
					"when": "view == postgres && viewItem == postgres.tree.database",
					"group": "postgres@1"
				},
				{
					"command": "postgres.refresh",
					"when": "view == postgres && viewItem == postgres.tree.table",
					"group": "postgres@1"
				},
				{
					"command": "postgres.refresh",
					"when": "view == postgres && viewItem == postgres.tree.function-folder",
					"group": "postgres@1"
				},
				{
					"command": "postgres.newQuery",
					"when": "view == postgres && viewItem == postgres.tree.connection",
					"group": "postgres@1"
				},
				{
					"command": "postgres.newQuery",
					"when": "view == postgres && viewItem == postgres.tree.database",
					"group": "postgres@1"
				},
				{
					"command": "postgres.newQuery",
					"when": "view == postgres && viewItem == postgres.tree.table",
					"group": "postgres@1"
				},
				{
					"command": "postgres.newQuery",
					"when": "view == postgres && viewItem == postgres.tree.column",
					"group": "postgres@1"
				},
				{
					"command": "postgres.selectTop",
					"when": "view == postgres && viewItem == postgres.tree.table",
					"group": "postgres@2"
				},
				{
					"command": "postgres.selectTop1000",
					"when": "view == postgres && viewItem == postgres.tree.table",
					"group": "postgres@2"
				}
			]
		},
		"viewsContainers": {
			"activitybar": [
				{
					"id": "postgres-explorer",
					"title": "PostgreSQL Explorer",
					"icon": "resources/postgres-explorer.svg"
				}
			]
		},
		"views": {
			"postgres-explorer": [
				{
					"id": "postgres",
					"name": "PostgreSQL",
					"when": "config.postgres.showExplorer == true"
				}
			]
		}
	},
	"scripts": {
		"vscode:prepublish": "npm run build-preview && npm run compile",
		"compile": "tsc -p ./",
		"watch": "npm run build-preview-dev && tsc -watch -p ./",
		"postinstall": "node ./node_modules/vscode/bin/install",
		"test": "npm run compile && node ./node_modules/vscode/bin/test",
		"build-preview-dev": "npx webpack --mode development",
		"build-preview": "npx webpack --mode production",
		"extension-package": "vsce package --yarn",
		"extension-publish": "vsce publish --yarn"
	},
	"devDependencies": {
		"@types/csv-stringify": "^1.4.2",
		"@types/keytar": "^4.0.1",
		"@types/mocha": "^2.2.42",
		"@types/node": "^7.0.70",
		"@types/pg": "^7.4.10",
		"@types/uuid": "^3.4.4",
		"ts-loader": "^4.5.0",
		"typescript": "^2.9.2",
		"vscode": "^1.1.30",
		"webpack": "^4.29.6",
		"webpack-cli": "^3.3.0"
	},
	"dependencies": {
		"csv-stringify": "^3.1.1",
		"easyxml": "^2.0.1",
		"pg": "^7.4.3",
		"uuid": "^3.3.2"
	},
	"__metadata": {
		"id": "5be97d41-4722-4956-98e4-e56ae2a448f5",
		"publisherDisplayName": "bring.out doo Sarajevo",
		"publisherId": "c96dd534-07ec-488e-ba11-b474391a086c"
	}
}
